import os
import random
import telebot
from telebot import types
from SimpleQIWI import *
from datetime import datetime, timedelta
from dotenv import dotenv_values
from pymongo import MongoClient
import sys

if "-docker" in sys.argv:
    mongo_client = MongoClient(os.getenv("DB_HOST"), int(os.getenv("DB_PORT")))
    db = mongo_client[os.getenv("DB_NAME")]
    client = telebot.TeleBot(os.getenv("TOKEN_BOT"))
    api = QApi(token=os.getenv("TOKEN_QIWI"), phone=os.getenv("PHONE_QIWI"))
    public_key_qiwi = os.getenv("PUBLIC_KEY_QIWI")
    download_str = f"[–°–∫–∞—á–∞—Ç—å –¥–ª—è windows](https://openvpn.net/downloads/openvpn-connect-v3-windows.msi)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è mac](https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è android](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è iphone](https://itunes.apple.com/us/app/openvpn-connect/id590379981?mt=8)"
    help_str = f"[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è windows]({os.getenv('HELP_WINDOWS_URL')})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è mac]({os.getenv('HELP_MAC_URL')})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è android]({os.getenv('HELP_ANDROID_URL')})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iphone]({os.getenv('HELP_IPHONE_URL')})"
    pay_help_str = f"[–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π]({os.getenv('CARD_PAY_URL_HELP')})\n[–û–ø–ª–∞—Ç–∞ qiwi]({os.getenv('QIWI_PAY_URL_HELP')})"
    trial_hours = os.getenv("TRIAL_HOURS")
else:
    config = dotenv_values(".env")
    mongo_client = MongoClient("localhost", int(config["DB_PORT"]))
    db = mongo_client[config["DB_NAME"]]
    client = telebot.TeleBot(config["TOKEN_BOT"])
    api = QApi(token=config["TOKEN_QIWI"], phone=config["PHONE_QIWI"])
    public_key_qiwi = config["PUBLIC_KEY_QIWI"]
    download_str = f"[–°–∫–∞—á–∞—Ç—å –¥–ª—è windows](https://openvpn.net/downloads/openvpn-connect-v3-windows.msi)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è mac](https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è android](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è iphone](https://itunes.apple.com/us/app/openvpn-connect/id590379981?mt=8)"
    help_str = f"[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è windows]({config['HELP_WINDOWS_URL']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è mac]({config['HELP_MAC_URL']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è android]({config['HELP_ANDROID_URL']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iphone]({config['HELP_IPHONE_URL']})"
    pay_help_str = f"[–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π]({config['CARD_PAY_URL_HELP']})\n[–û–ø–ª–∞—Ç–∞ qiwi]({config['QIWI_PAY_URL_HELP']})"
    trial_hours = config["TRIAL_HOURS"]

users_collection = db.users


def check_license(uid, cid):
    user = users_collection.find_one({"_id": uid})
    current_date = datetime.today()
    if current_date < user["die_to"]:
        return True
    client.send_message(cid, f"‚õîÔ∏è –õ–∏—Ü–µ–Ω–∑–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!")
    return False


def get_buy_url(uid, price):
    link = f"https://oplata.qiwi.com/create?publicKey={public_key_qiwi}&amount={price}&comment={uid}"
    return link


def check_payment(payid, price):
    for payments in api.payments["data"]:
        if (
            (payments["comment"] == payid)
            and (payments["status"] == "SUCCESS")
            and (payments["sum"]["amount"] == price)
        ):
            return True


def set_license(die_to, uid, days):
    new_die_to = die_to + timedelta(days=days)
    db.users.update_one(
        {"_id": uid},
        {"$inc": {"payments": 1}, "$set": {"die_to": new_die_to}},
    )


@client.message_handler(commands=["start"])
def start(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        current_date = datetime.today() + timedelta(hours=int(trial_hours))
        if users_collection.find_one({"_id": uid}) is None:
            users_collection.insert_one(
                {
                    "_id": uid,
                    "access": 0,
                    "die_to": current_date,
                    "payments": 0,
                    "first_promo": False,
                }
            )
            client.send_message(
                cid,
                f"‚úã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vpn –Ω–∞ –≤–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n‚è≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /referal –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\nüìï –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø–æ–º–æ—â–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\nüóø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vpn, –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞\nüßæ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n–ö—Å—Ç–∞—Ç–∏ —Å–ª–µ–≤–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ *‚â° –ú–µ–Ω—é*, —Ç–∞–º —Ç–æ–∂–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {trial_hours} —á–∞—Å–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                parse_mode="Markdown",
            )
        else:
            client.send_message(
                cid,
                f"ü§ù *–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n‚è≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /referal –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\nüìï –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø–æ–º–æ—â–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\nüóø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vpn, –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞\nüßæ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                parse_mode="Markdown",
            )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["servers"])
def buy(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        if not check_license(uid, cid):
            return
        text = f"üåè *–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä*"
        rmk = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for server in os.listdir("vpns"):
            if not os.listdir(f"vpns/{server}"):
                continue
            buttons.append(
                types.InlineKeyboardButton(
                    text=f"{server}",
                    callback_data=f"select_{server}",
                ),
            )
        rmk.add(*buttons)
        client.send_message(
            cid,
            text,
            parse_mode="Markdown",
            reply_markup=rmk,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.callback_query_handler(lambda call: call.data.partition("_")[0] == "select")
def select_callback(call):
    try:
        if call.data.partition("_")[0] == "select":
            if not check_license(call.from_user.id, call.message.chat.id):
                return
            server = call.data.partition("_")[2]
            configs_dir = f"vpns/{server}"
            config_file = open(
                os.path.join(configs_dir, random.choice(os.listdir(configs_dir)))
            )
            client.send_document(
                call.message.chat.id,
                config_file,
                caption=f"{server}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn",
                visible_file_name=f"{server.replace(' ', '')[:-1]}.ovpn".replace(
                    " ", ""
                ).lower(),
                parse_mode="Markdown",
            )
        client.answer_callback_query(callback_query_id=call.id)
    except:
        client.send_message(call.message.chat.id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["profile", "myinfo", "myprofile"])
def myprofile(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        user = users_collection.find_one({"_id": uid})
        if user["access"] == 0:
            accessname = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif user["access"] == 1:
            accessname = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif user["access"] == 777:
            accessname = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
        client.send_message(
            cid,
            f"*üìá –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\nüë§ –í–∞—à ID: `{user['_id']}`\n‚è≥ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –¥–æ: *{user['die_to'].strftime('%d-%m-%Y %H:%M')}*\nüëë –í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: *{accessname}*\nüéü –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `U_{user['_id']}`",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["buy", "license"])
def buy(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        user = users_collection.find_one({"_id": uid})
        text = f"üõí *–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ qiwi –∏–ª–∏ –∫–∞—Ä—Ç–æ–π*\n\n‚è≥ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –¥–æ:* {user['die_to'].strftime('%d-%m-%Y %H:%M')}\n\n*"
        payid = str(uid) + str(user["payments"])
        rmk = types.InlineKeyboardMarkup()
        day1 = types.InlineKeyboardButton(text="1Ô∏è‚É£ = 25‚ÇΩ", url=get_buy_url(payid, 25))
        day3 = types.InlineKeyboardButton(text="3Ô∏è‚É£ = 75‚ÇΩ", url=get_buy_url(payid, 75))
        day7 = types.InlineKeyboardButton(
            text="7Ô∏è‚É£ = 150‚ÇΩ", url=get_buy_url(payid, 150)
        )
        day14 = types.InlineKeyboardButton(
            text="1Ô∏è‚É£4Ô∏è‚É£ = 300‚ÇΩ", url=get_buy_url(payid, 300)
        )
        day30 = types.InlineKeyboardButton(
            text="3Ô∏è‚É£0Ô∏è‚É£ = 600‚ÇΩ", url=get_buy_url(payid, 600)
        )
        success = types.InlineKeyboardButton(
            text="‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª!", callback_data="success_pay"
        )
        rmk.add(day1, day3, day7, day14, day30)
        rmk.add(success)
        client.send_message(
            cid,
            f"{text}1. –û–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π\n2. –ù–∞–∂–º–∏—Ç–µ *‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª*",
            parse_mode="Markdown",
            reply_markup=rmk,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["referal"])
def referal(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        client.send_message(
            cid,
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n‚ûï –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ —Ç–µ–º —Å–∞–º—ã–º –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å —Å–µ–±–µ –ª–∏—Ü–µ–Ω–∑–∏—é\n\nü§º‚Äç‚ôÇÔ∏è –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50 —á–∞—Å–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç 150 —á–∞—Å–æ–≤\n\nüéü –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —á–∞—Å–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: `U_{uid}`\n\nü§≥ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /applypromo",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["applypromo"])
def apply_promo(message):
    try:
        cid = message.chat.id
        msg = client.send_message(
            cid,
            f"‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

    client.register_next_step_handler(msg, find_promo)


def find_promo(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        if (
            "U_" in message.text
            and not message.text == f"U_{uid}"
            and users_collection.find_one({"_id": int(message.text.partition("_")[2])})
            and users_collection.find_one({"_id": uid, "first_promo": False})
        ):
            users_collection.update_one(
                {"_id": uid},
                [
                    {
                        "$set": {
                            "die_to": {
                                "$dateAdd": {
                                    "startDate": "$die_to",
                                    "unit": "hour",
                                    "amount": 150,
                                }
                            },
                            "first_promo": True,
                        },
                    }
                ],
            )
            users_collection.update_one(
                {"_id": int(message.text.partition("_")[2])},
                [
                    {
                        "$set": {
                            "die_to": {
                                "$dateAdd": {
                                    "startDate": "$die_to",
                                    "unit": "hour",
                                    "amount": 50,
                                }
                            }
                        },
                    }
                ],
            )
            client.reply_to(message, "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω")
        else:
            client.reply_to(message, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.callback_query_handler(lambda call: call.data == "success_pay")
def success_pay(call):
    try:
        if call.data == "success_pay":
            uid = call.from_user.id
            cid = call.message.chat.id
            user = users_collection.find_one({"_id": uid})
            payid = str(uid) + str(user["payments"])
            if check_payment(payid, 25):
                set_license(user["die_to"], uid, 1)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 1 –¥–µ–Ω—å!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 75):
                set_license(user["die_to"], uid, 3)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 3 –¥–Ω—è!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 150):
                set_license(user["die_to"], uid, 7)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 300):
                set_license(user["die_to"], uid, 14)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 14 –¥–Ω–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 600):
                set_license(user["die_to"], uid, 30)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
        client.send_message(cid, "üö´ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        client.answer_callback_query(callback_query_id=call.id)

    except:
        client.send_message(call.message.chat.id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["help"])
def help(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        user = users_collection.find_one({"_id": uid})
        if user["access"] >= 1:
            client.send_message(
                cid,
                "*üßæ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*\n\n/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/buy - –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é\n/manuals - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n/servers - –ø–æ–∫–∞–∑–∞—Ç—å vpn —Å–µ—Ä–≤–µ—Ä–∞\n/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/about - –æ –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
        else:
            client.send_message(
                cid,
                "*üßæ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*\n\n/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/buy - –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é\n/manuals - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n/servers - –ø–æ–∫–∞–∑–∞—Ç—å vpn —Å–µ—Ä–≤–µ—Ä–∞\n/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/about - –æ –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["support"])
def support(message):
    try:
        cid = message.chat.id
        client.send_message(
            cid,
            f"*üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\nüì¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @withVpn",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["about"])
def about(message):
    try:
        cid = message.chat.id
        client.send_message(
            cid,
            f"*‚ÑπÔ∏è –û –Ω–∞—Å*\n\nüõ∞ A long time ago, in a galaxy far, far away‚Ä¶",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["manuals"])
def manuals(message):
    try:
        cid = message.chat.id
        client.send_message(
            cid,
            f"*üì∫ –í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏*\n\n*üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é*\n{pay_help_str}\n\n*‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É*\n{download_str}\n\n*üõ† –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å*\n{help_str}",
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


client.infinity_polling(timeout=10, long_polling_timeout=5)
