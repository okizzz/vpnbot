import os
import random
import telebot
import configure
import sqlite3
from telebot import types
import threading
from SimpleQIWI import *
from datetime import datetime, timedelta

client = telebot.TeleBot(configure.config["tokenbot"])
db = sqlite3.connect("baza.db", check_same_thread=False)
sql = db.cursor()
lock = threading.Lock()
api = QApi(token=configure.config["tokenqiwi"], phone=configure.config["phoneqiwi"])

pay_help_str = f"[–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π]({configure.config['pay_card_url']})\n[–û–ø–ª–∞—Ç–∞ qiwi]({configure.config['pay_qiwi_url']})"
download_str = f"[–°–∫–∞—á–∞—Ç—å –¥–ª—è windows](https://openvpn.net/downloads/openvpn-connect-v3-windows.msi)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è mac](https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è android](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è iphone](https://itunes.apple.com/us/app/openvpn-connect/id590379981?mt=8)"
help_str = f"[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è windows]({configure.config['help_windows_url']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è mac]({configure.config['help_mac_url']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è android]({configure.config['help_android_url']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iphone]({configure.config['help_windows_url']})"

trial_minutes = 30

sql.execute(
    """CREATE TABLE IF NOT EXISTS users (id BIGINT, access INT, die_to text, payments INT)"""
)
sql.execute(
    """CREATE TABLE IF NOT EXISTS vpns (id INT, name TEXT, flag TEXT, use INT)"""
)
db.commit()


def check_license(uid, cid):
    user = sql.execute(f"SELECT * FROM users WHERE id = {uid}").fetchall()[0]
    current_date = datetime.today()
    die_to = datetime.strptime(user[2], "%Y-%m-%d %H:%M:%S.%f")
    if current_date < die_to:
        return True
    client.send_message(cid, f"‚õîÔ∏è –õ–∏—Ü–µ–Ω–∑–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!")
    return False


def get_buy_url(uid, price):
    publicKey = configure.config["publickey"]
    link = f"https://oplata.qiwi.com/create?publicKey={publicKey}&amount={price}&comment={uid}"
    return link


def check_payment(payid, price):
    for payments in api.payments["data"]:
        if (
            (payments["comment"] == payid)
            and (payments["status"] == "SUCCESS")
            and (payments["sum"]["amount"] == price)
        ):
            return True


def set_license(date_str, uid, days):
    die_to = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S.%f")
    new_die_to = die_to + timedelta(days=days)
    sql.execute(
        f"UPDATE users SET payments = payments + 1, die_to = '{new_die_to}' WHERE id = {uid}"
    )
    db.commit()


@client.message_handler(commands=["start"])
def start(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        current_date = datetime.today() + timedelta(minutes=trial_minutes)
        if sql.execute(f"SELECT id FROM users WHERE id = {uid}").fetchone() is None:
            sql.execute(f"INSERT INTO users VALUES ({uid}, 0, '{current_date}', 0)")
            client.send_message(
                cid,
                f"‚úã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vpn –Ω–∞ –≤–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n–ë–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n‚è≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏\nüìï –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø–æ–º–æ—â–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\nüóø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vpn, –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞\nüßæ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n–ö—Å—Ç–∞—Ç–∏ —Å–ª–µ–≤–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ *‚â° –ú–µ–Ω—é*, —Ç–∞–º —Ç–æ–∂–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
            db.commit()
        else:
            client.send_message(
                cid,
                f"ü§ù –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n‚è≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏\nüìï –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø–æ–º–æ—â–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\nüóø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vpn, –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞\nüßæ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                parse_mode="Markdown",
            )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["servers"])
def buy(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        if not check_license(uid, cid):
            return
        text = "üåè –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä"
        rmk = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for servers in sql.execute(f"SELECT * FROM vpns"):
            if not os.listdir(f"vpns/{servers[0]}"):
                continue
            buttons.append(
                types.InlineKeyboardButton(
                    text=f"{servers[1]} {servers[2]}",
                    callback_data=f"select_{servers[0]}",
                ),
            )
        rmk.add(*buttons)
        client.send_message(
            cid,
            text,
            parse_mode="Markdown",
            reply_markup=rmk,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.callback_query_handler(lambda call: call.data.partition("_")[0] == "select")
def select_callback(call):
    try:
        if call.data.partition("_")[0] == "select":
            if not check_license(call.from_user.id, call.message.chat.id):
                return
            vpnid = int(call.data.partition("_")[2])
            for servers in sql.execute(f"SELECT * FROM vpns WHERE id = {vpnid}"):
                configs_dir = f"vpns/{str(servers[0])}"
                config_file = open(
                    os.path.join(configs_dir, random.choice(os.listdir(configs_dir)))
                )
                client.send_document(
                    call.message.chat.id,
                    config_file,
                    caption=f"{servers[1]} {servers[2]}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn",
                    visible_file_name=f"{servers[1]}.ovpn".replace(" ", "").lower(),
                    parse_mode="Markdown",
                )
                sql.execute(f"UPDATE vpns SET use = use + 1 WHERE id = {vpnid}")
                db.commit()
        client.answer_callback_query(callback_query_id=call.id)
    except:
        client.send_message(call.message.chat.id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["profile", "myinfo", "myprofile"])
def myprofile(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        info = sql.execute(f"SELECT * FROM users WHERE id = {uid}").fetchone()
        if info[1] == 0:
            accessname = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif info[1] == 1:
            accessname = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif info[1] == 777:
            accessname = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
        client.send_message(
            cid,
            f"*üìá –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n*üë§ –í–∞—à ID:* {info[0]}\n*‚è≥ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –¥–æ:* {':'.join(info[2].split(':')[:-1])}\n*üëë –í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:* {accessname}",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["buy", "license"])
def buy(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        info = sql.execute(f"SELECT * FROM users WHERE id = {uid}").fetchone()
        text = f"üõí *–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ qiwi –∏–ª–∏ –∫–∞—Ä—Ç–æ–π*\n\n‚è≥ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –¥–æ:* {':'.join(info[2].split(':')[:-1])}\n\n*"
        payid = str(uid) + str(info[3])
        rmk = types.InlineKeyboardMarkup()
        day1 = types.InlineKeyboardButton(text="1Ô∏è‚É£ = 25‚ÇΩ", url=get_buy_url(payid, 25))
        day3 = types.InlineKeyboardButton(text="3Ô∏è‚É£ = 75‚ÇΩ", url=get_buy_url(payid, 75))
        day7 = types.InlineKeyboardButton(
            text="7Ô∏è‚É£ = 150‚ÇΩ", url=get_buy_url(payid, 150)
        )
        day14 = types.InlineKeyboardButton(
            text="1Ô∏è‚É£4Ô∏è‚É£ = 300‚ÇΩ", url=get_buy_url(payid, 300)
        )
        day30 = types.InlineKeyboardButton(
            text="3Ô∏è‚É£0Ô∏è‚É£ = 600‚ÇΩ", url=get_buy_url(payid, 600)
        )
        success = types.InlineKeyboardButton(
            text="‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª!", callback_data="success_pay"
        )
        rmk.add(day1, day3, day7, day14, day30)
        rmk.add(success)
        client.send_message(
            cid,
            f"{text}1. –û–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π\n2. –ù–∞–∂–º–∏—Ç–µ *‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª*",
            parse_mode="Markdown",
            reply_markup=rmk,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.callback_query_handler(lambda call: call.data == "success_pay")
def success_pay(call):
    try:
        if call.data == "success_pay":
            uid = call.from_user.id
            cid = call.message.chat.id
            user = sql.execute(f"SELECT * FROM users WHERE id = {uid}").fetchone()
            payid = str(uid) + str(user[3])
            if check_payment(payid, 25):
                set_license(user[2], uid, 1)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 1 –¥–µ–Ω—å!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 75):
                set_license(user[2], uid, 3)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 3 –¥–Ω—è!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 150):
                set_license(user[2], uid, 7)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 300):
                set_license(user[2], uid, 14)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 14 –¥–Ω–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 600):
                set_license(user[2], uid, 30)
                client.send_message(
                    cid,
                    f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
        client.send_message(cid, "üö´ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        client.answer_callback_query(callback_query_id=call.id)

    except:
        client.send_message(call.message.chat.id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["help"])
def helpcmd(message):
    cid = message.chat.id
    uid = message.from_user.id
    with lock:
        sql.execute(f"SELECT * FROM users WHERE id = {uid}")
        getaccess = sql.fetchone()[1]
    if getaccess >= 1:
        client.send_message(
            cid,
            "*üßæ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*\n\n/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/buy - –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é\n/manuals - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n/servers - –ø–æ–∫–∞–∑–∞—Ç—å vpn —Å–µ—Ä–≤–µ—Ä–∞\n/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/about - –æ –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            parse_mode="Markdown",
        )
    else:
        client.send_message(
            cid,
            "*üßæ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*\n\n/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/buy - –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é\n/manuals - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n/servers - –ø–æ–∫–∞–∑–∞—Ç—å vpn —Å–µ—Ä–≤–µ—Ä–∞\n/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/about - –æ –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            parse_mode="Markdown",
        )


@client.message_handler(commands=["manuals"])
def myprofile(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        client.send_message(
            cid,
            f"*üì∫ –í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏*\n\n*üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é*\n{pay_help_str}\n\n*‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É*\n{download_str}\n\n*üõ† –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å*\n{help_str}",
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


client.polling(none_stop=True, interval=0)
