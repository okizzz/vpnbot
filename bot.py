import os
import random
import telebot
from telebot import types
from SimpleQIWI import *
from datetime import datetime, timedelta
from dotenv import dotenv_values
from pymongo import MongoClient
import sys

if "-docker" in sys.argv:
    mongo_client = MongoClient(os.getenv("DB_HOST"), int(os.getenv("DB_PORT")))
    db = mongo_client[os.getenv("DB_NAME")]
    client = telebot.TeleBot(os.getenv("TOKEN_BOT"))
    api = QApi(token=os.getenv("TOKEN_QIWI"), phone=os.getenv("PHONE_QIWI"))
    public_key_qiwi = os.getenv("PUBLIC_KEY_QIWI")
    download_str = f"[–°–∫–∞—á–∞—Ç—å –¥–ª—è windows](https://openvpn.net/downloads/openvpn-connect-v3-windows.msi)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è mac](https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è android](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è iphone](https://itunes.apple.com/us/app/openvpn-connect/id590379981?mt=8)"
    help_str = f"[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è windows]({os.getenv('HELP_WINDOWS_URL')})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è mac]({os.getenv('HELP_MAC_URL')})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è android]({os.getenv('HELP_ANDROID_URL')})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iphone]({os.getenv('HELP_IPHONE_URL')})"
    pay_help_str = f"[–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π]({os.getenv('CARD_PAY_URL_HELP')})\n[–û–ø–ª–∞—Ç–∞ qiwi]({os.getenv('QIWI_PAY_URL_HELP')})"
    trial_hours = os.getenv("TRIAL_HOURS")
    channel = os.getenv("CHANNEL")
else:
    config = dotenv_values(".env")
    mongo_client = MongoClient("localhost", int(config["DB_PORT"]))
    db = mongo_client[config["DB_NAME"]]
    client = telebot.TeleBot(config["TOKEN_BOT"])
    api = QApi(token=config["TOKEN_QIWI"], phone=config["PHONE_QIWI"])
    public_key_qiwi = config["PUBLIC_KEY_QIWI"]
    download_str = f"[–°–∫–∞—á–∞—Ç—å –¥–ª—è windows](https://openvpn.net/downloads/openvpn-connect-v3-windows.msi)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è mac](https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è android](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)\n[–°–∫–∞—á–∞—Ç—å –¥–ª—è iphone](https://itunes.apple.com/us/app/openvpn-connect/id590379981?mt=8)"
    help_str = f"[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è windows]({config['HELP_WINDOWS_URL']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è mac]({config['HELP_MAC_URL']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è android]({config['HELP_ANDROID_URL']})\n[–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iphone]({config['HELP_IPHONE_URL']})"
    pay_help_str = f"[–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π]({config['CARD_PAY_URL_HELP']})\n[–û–ø–ª–∞—Ç–∞ qiwi]({config['QIWI_PAY_URL_HELP']})"
    trial_hours = config["TRIAL_HOURS"]
    channel = config["CHANNEL"]

users_collection = db.users


def get_buy_url(uid, price):
    link = f"https://oplata.qiwi.com/create?publicKey={public_key_qiwi}&amount={price}&comment={uid}"
    return link


def check_channel_exist(uid, cid):
    if not client.get_chat_member("@withVpnChannel", uid).status == "left":
        return True
    client.send_message(cid, f"‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {channel}")
    return False


def check_payment(payid, price):
    for payments in api.payments["data"]:
        if (
            (payments["comment"] == payid)
            and (payments["status"] == "SUCCESS")
            and (payments["sum"]["amount"] == price)
        ):
            return True


@client.message_handler(commands=["start"])
def start(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        if users_collection.find_one({"_id": uid}) is None:
            users_collection.insert_one(
                {
                    "_id": uid,
                    "access": 0,
                    "payments": 0,
                }
            )
            client.send_message(
                cid,
                f"‚úã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vpn –Ω–∞ –≤–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\nüì≤ –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @withVpnChannel\n\nüìï –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\nüóø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vpn, –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞\nüòá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /donate –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è\nüßæ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n–ö—Å—Ç–∞—Ç–∏ —Å–ª–µ–≤–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ *‚â° –ú–µ–Ω—é*, —Ç–∞–º —Ç–æ–∂–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
        else:
            client.send_message(
                cid,
                f"ü§ù *–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\nüìï –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\nüóø –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /about –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ vpn, –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞\nüòá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /donate –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è\nüßæ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                parse_mode="Markdown",
            )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["servers"])
def servers(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        if os.path.exists("vpns/lock"):
            client.send_message(
                cid, f"üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /servers —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥"
            )
            return
        if not check_channel_exist(uid, cid):
            return
        text = f"üåè *–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä*"
        rmk = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for server in os.listdir("vpns/old"):
            if (server == ".DS_Store") or not os.listdir(f"vpns/old/{server}"):
                continue
            buttons.append(
                types.InlineKeyboardButton(
                    text=f"{server}",
                    callback_data=f"select_{server}",
                ),
            )
        rmk.add(*buttons)
        client.send_message(
            cid,
            text,
            parse_mode="Markdown",
            reply_markup=rmk,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.callback_query_handler(lambda call: call.data.partition("_")[0] == "select")
def select_callback(call):
    try:
        if os.path.exists("vpns/lock"):
            client.send_message(
                call.message.chat.id,
                f"üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /servers —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥",
            )
            return
        if call.data.partition("_")[0] == "select":
            if not check_channel_exist(call.from_user.id, call.message.chat.id):
                return
            server = call.data.partition("_")[2]
            configs_dir = f"vpns/old/{server}"
            config_file = open(
                os.path.join(configs_dir, random.choice(os.listdir(configs_dir)))
            )
            client.send_document(
                call.message.chat.id,
                config_file,
                caption=f"{server}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /manuals –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ vpn",
                visible_file_name=f"{datetime.now().strftime('%d%m%Y_%H%M')}_{server}.ovpn".lower(),
                parse_mode="Markdown",
            )
        client.answer_callback_query(callback_query_id=call.id)
    except:
        client.send_message(call.message.chat.id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["profile", "myinfo", "myprofile"])
def myprofile(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        user = users_collection.find_one({"_id": uid})
        if user["access"] == 0:
            accessname = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif user["access"] == 1:
            accessname = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif user["access"] == 777:
            accessname = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
        client.send_message(
            cid,
            f"*üìá –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\nüë§ –í–∞—à ID: `{user['_id']}`\nüëë –í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: *{accessname}*",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["donate"])
def donate(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        user = users_collection.find_one({"_id": uid})
        text = f"üòá *–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ qiwi –∏–ª–∏ –∫–∞—Ä—Ç–æ–π*\n\n"
        payid = str(uid) + str(user["payments"])
        rmk = types.InlineKeyboardMarkup()
        sum25 = types.InlineKeyboardButton(text="1Ô∏è‚É£ = 25‚ÇΩ", url=get_buy_url(payid, 25))
        sum75 = types.InlineKeyboardButton(text="3Ô∏è‚É£ = 75‚ÇΩ", url=get_buy_url(payid, 75))
        sum150 = types.InlineKeyboardButton(
            text="7Ô∏è‚É£ = 150‚ÇΩ", url=get_buy_url(payid, 150)
        )
        sum300 = types.InlineKeyboardButton(
            text="1Ô∏è‚É£4Ô∏è‚É£ = 300‚ÇΩ", url=get_buy_url(payid, 300)
        )
        sum600 = types.InlineKeyboardButton(
            text="3Ô∏è‚É£0Ô∏è‚É£ = 600‚ÇΩ", url=get_buy_url(payid, 600)
        )
        success = types.InlineKeyboardButton(
            text="‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª!", callback_data="success_pay"
        )
        rmk.add(sum25, sum75, sum150, sum300, sum600)
        rmk.add(success)
        client.send_message(
            cid,
            f"{text}1. –û–ø–ª–∞—Ç–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É\n2. –ù–∞–∂–º–∏—Ç–µ *‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª*",
            parse_mode="Markdown",
            reply_markup=rmk,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.callback_query_handler(lambda call: call.data == "success_pay")
def success_pay(call):
    try:
        if call.data == "success_pay":
            uid = call.from_user.id
            cid = call.message.chat.id
            user = users_collection.find_one({"_id": uid})
            payid = str(uid) + str(user["payments"])
            if check_payment(payid, 25):
                client.send_message(
                    cid,
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ 25 —Ä—É–±–ª–µ–π!\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 75):
                client.send_message(
                    cid,
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ 75 —Ä—É–±–ª–µ–π!\n–≠—Ç–∏–º –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–µ—Ä–≤–∏—Å—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 150):
                client.send_message(
                    cid,
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ 150 —Ä—É–±–ª–µ–π!\n–≠—Ç–∏–º –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–µ—Ä–≤–∏—Å—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 300):
                client.send_message(
                    cid,
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ 300 —Ä—É–±–ª–µ–π!\n–≠—Ç–∏–º –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–µ—Ä–≤–∏—Å—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
            if check_payment(payid, 600):
                client.send_message(
                    cid,
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ 600 —Ä—É–±–ª–µ–π!\n–≠—Ç–∏–º –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–µ—Ä–≤–∏—Å—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n\n–ù–∞–∂–º–∏—Ç–µ /servers –¥–ª—è –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
                return
        client.send_message(cid, "üö´ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        client.answer_callback_query(callback_query_id=call.id)

    except:
        client.send_message(call.message.chat.id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["help"])
def help(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        user = users_collection.find_one({"_id": uid})
        if user["access"] >= 1:
            client.send_message(
                cid,
                "*üßæ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*\n\n/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/donate - –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å\n/manuals - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n/servers - –ø–æ–∫–∞–∑–∞—Ç—å vpn —Å–µ—Ä–≤–µ—Ä–∞\n/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/about - –æ –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
        else:
            client.send_message(
                cid,
                "*üßæ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥*\n\n/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/donate - –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å\n/manuals - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n/servers - –ø–æ–∫–∞–∑–∞—Ç—å vpn —Å–µ—Ä–≤–µ—Ä–∞\n/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/about - –æ –±–æ—Ç–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["support"])
def support(message):
    try:
        cid = message.chat.id
        client.send_message(
            cid,
            f"*üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\nüì¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @withVpn",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["about"])
def about(message):
    try:
        cid = message.chat.id
        client.send_message(
            cid,
            f"*‚ÑπÔ∏è –û –Ω–∞—Å*\n\nüõ∞ A long time ago, in a galaxy far, far away‚Ä¶",
            parse_mode="Markdown",
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@client.message_handler(commands=["manuals"])
def manuals(message):
    try:
        cid = message.chat.id
        uid = message.from_user.id
        if not check_channel_exist(uid, cid):
            return

        client.send_message(
            cid,
            f"*üì∫ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏*\n\n*‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É*\n{download_str}\n\n*üõ† –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å*\n{help_str}",
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
    except:
        client.send_message(cid, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


client.infinity_polling(timeout=10, long_polling_timeout=5)
